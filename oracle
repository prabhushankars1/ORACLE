1 Emp db

1  create table employee(empno number primary key,empname varchar2(20),designation varchar2(30),gender varchar2(6),age number,dojdate,salary number);

2 insert into employee values(&empno,'&empname','&designation','&gender',&age,'&doj',&salary);

3 select * from employee where salary>30000;

4 select * from employee where age between 25 and 30;

5 select * from employee where empname like '%a';

6  select * from employee where salary in(35000,30000,28000);

7  select * from employee where empno=103;

LOGICAL
8  select * from employee where salary<50000 and salary>30000;

9 select * from employee where designation='manager' or designation='admin';

10 select * from employee where not salary<30000;

SORTING

11  select * from employee order by empno;

12  select * from employee order by empnodesc;

SET OPERATION
 13  select * from employee where salary>30000 union select * from employee where age between 25 and 30;

14  select * from employee where salary>30000 union all select * from employee where age between 25 and 30;

15   select * from employee where salary>30000 intersect select * from employee where age between 25 and 30;

GROUP FUNCTION
16   select count(*) from employee where gender='female';
17  select sum(salary) from employee;
18  select avg(salary) from employee;

19  select max(salary) from employee;

20 select min(salary) from employee;

PROGRAM 2   LIB MAG

1 create table library_master(accno number primary key,title varchar2(25),author varchar2(25),
2  create table library_transaction(useridnumber,accno number references library_master(accno), date_of_issue date, date_of_return date);

3  insert into library_mastervalues(&accno,'&title','&author',&rate);

4  select * from library_master; 

5  insert into library_transactionvalues(&userid,&accno,'&date_of_issue','&date_of_return');

6  select * from library_transaction;

7   set linesize 75 
TTitlecenter 'LIBRARY MANAGEMENT' skip1-
 >center ******************
  columnaccno heading 'ACCOUNT NUMBER'
  column title heading 'BOOK_NAME' 
 columndate_of_issue heading 'DATE_OF_ISSUE'
  columndate_of_retrun heading 'DATE_OF_RETURN'
  set underline
 break on row skip1
  selectm.accno,m.title,t.date_of_issue from library_masterm,library_transaction t where m.accno=t.accno and date_of_return='24-aug-16';

Prg 3 inventory table

1  create table inventory(prono number primary key, 
 pronamevarchar(20), 
 rate number); 

2 insert into inventory values(&prono,'&proname',&rate); 

3  select * from inventory; 

4  getinventory_update.sql 
 Begin

 update inventory set rate=rate+(rate*20/100); 
 Commit;
* end; 
 /

5   select * from inventory;

6  alter table inventory add no_of_items number; 

7  desc inventory; 

8  update inventory set no_of_items=case prono
  when 1001 then 10
  when 1002 then 8
  when 1003 then 6
  when 1004 then 4
  end;  

9  select * from inventory; 

4 SPLIT STUDENT TABLE
    
1  create table student8(rollno number,name varchar2(20),totalmarks number,result varchar2(4));

2  insert into student8 values(&rollno,'&name',&total,'&result');

3  select * from student8;

4  declare 
query1 varchar2(100):='create table student8_pass as(select * from student8 where result=''pass'')';
 query2 varchar2(100):='create table student8_fail as(select * from student8 where result=''fail'')'; 
Begin
 execute immediate query1;
 execute immediate query2;
 End;
 /  

5  declare 
cursor cpass is select * from student8_pass;
 cursor cfail is select * from student8_fail; 
begin 
dbms_output.put_line('LIST OF PASSED STUDENTS');
 for passrec in cpass loop dbms_output.put_line(passrec.name);
 end loop; dbms_output.put_line('LIST OF FAILED STUDENTS'); 
for failrec in cfail loop dbms_output.put_line(failrec.name);
 end loop;
 end;
 / 

Program 5 Trigeer

1  create table inventory_master1(orderid number primary key,custid number,orderdate date,amount number);

2  create table inventory_trans1(orderid number references inventory_master1,productid number,productname varchar2(30),quantity number,unitprice number);

3  set serveroutput on 
create or replace trigger
 check1 before insert on inventory_master1 for each row
 declare 
begin 
if(:new.amount<0)then
 raise_application_error(-20040,'invalid amount');
 end if;
 end; 

4  insert into inventory_master1 values(&orderid,&custid,'&orderdate',&amount);

5  insert into inventory_master1 values(&orderid,&custid,'&orderdate',&amount);

6  create or replace trigger 
check2 before insert on inventory_trans1 for each row 
Declare
 begin 
if(:new.quantity<0)then 
raise_application_error(-20040,'invalid quantity'); 
end if; 
end; 

7  insert into inventory_trans1 values (&orderid,&productid,'&productname',&quantity,&unitprice);

8  insert into inventory_trans1 values (&orderid,&productid,'&productname',&quantity,&unitprice); 

PROGRAM 6  BANK ACCOUNT

1   create table bank_acc(accno number primary key,name varchar(20),deposit number);

2  set serveroutput on 
Declare
 vaccno number:= &vaccno; 
vname varchar2(20):= '&vname'; 
vdeposit number:= &vdeposit;
 zerodeposit exception; 
begin if vdeposit<=0 then raise zerodeposit; 
else
 insert into bank_acc(accno,name,deposit) values (vaccno,vname,vdeposit); dbms_output.put_line('Record is successfully inserted'); 
end if;
 exception 
when zerodeposit then 
dbms_output.put_line('Invalid deposit amount');
 End;
 /

 
